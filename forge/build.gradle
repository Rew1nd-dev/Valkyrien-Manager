buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Make sure this version matches the one included in Kotlin for Forge
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.21'
        // OPTIONAL Gradle plugin for Kotlin Serialization
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.8.21'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"

    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
}
loom {
    forge {
        mixinConfig "valkyrienmanager.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

repositories {
    // Add KFF Maven repository
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    mavenCentral()
    maven {
        name = "Valkyrien Skies Internal"
        url = 'https://maven.valkyrienskies.org'
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://repo.essential.gg/repository/maven-public"
    }
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }

}


configurations {
    common
    shadow
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    modImplementation (files("jars/valkyrien-ship-schematics-forge-1.0.jar"))
    // include modImplementation("net.spaceeye:valkyrien-ship-schematics-$project.name:1.0")
    // forgeRuntimeLibrary include(modImplementation("net.spaceeye:valkyrien-ship-schematics-$project.name-$minecraft_version:1.0"))

    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon (project(path: ':common', configuration: 'transformProductionForge')){ transitive = false }

    implementation "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
    // modApi("org.valkyrienskies:valkyrienskies-120-forge:${rootProject.vs2_version}") { transitive = false }
    // modApi("org.valkyrienskies:valkyrienskies-120-forge:${rootProject.vs2_version}") { transitive = false }


    // modImplementation("org.valkyrienskies.core:api:${rootProject.vs_core_version}") { transitive = false }
    /*
    runtimeOnly("org.valkyrienskies.core:api:${rootProject.vs_core_version}")
    runtimeOnly("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}")
    runtimeOnly("org.valkyrienskies.core:util:${rootProject.vs_core_version}")
    runtimeOnly("org.valkyrienskies.core:impl:${rootProject.vs_core_version}")
    * */

    modImplementation("org.valkyrienskies:valkyrienskies-120-forge:${rootProject.vs2_version}") { transitive = false }
    modImplementation("org.valkyrienskies.core:api:${rootProject.vs_core_version}") { transitive = false }




    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    implementation 'thedarkcolour:kotlinforforge:4.10.0'

    shadow(("gg.essential:elementa:676")) {transitive = false}
    shadow ("gg.essential:universalcraft-1.20.1-forge:384") {transitive = false}

}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    mergeServiceFiles()

    configurations = [project.configurations.shadow, project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")

    relocate("gg.essential.elementa", "com.verr1.elementa")
    relocate("gg.essential.universal", "com.verr1.universal")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    archiveBaseName.set("${archiveBaseName.get()}-Forge-${minecraft_version}")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
