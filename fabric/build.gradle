plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Terraformers'
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Valkyrien Skies Internal"
        url = 'https://maven.valkyrienskies.org'
    }
    maven {
        url = "https://repo.essential.gg/repository/maven-public"
    }
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    mavenCentral()
    repositories {
        maven {
            url "https://maven.squiddev.cc"
            content {
                includeGroup("cc.tweaked")
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // include("com.fasterxml:classmate:1.5.1")
    implementation("com.fasterxml:classmate:1.5.1")

    implementation "com.fasterxml.jackson.core:jackson-annotations:2.13.3"
    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10")

    modApi("org.valkyrienskies:valkyrienskies-120-fabric:${rootProject.vs2_version}") { transitive = false }
    modCompileOnlyApi("org.valkyrienskies.core:api:${rootProject.vs_core_version}") { transitive = false }


    modRuntimeOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    modCompileOnly("cc.tweaked:cc-tweaked-${minecraft_version}-fabric-api:1.113.0")
    modRuntimeOnly("cc.tweaked:cc-tweaked-${minecraft_version}-fabric:1.113.0")

    implementation("org.jgrapht:jgrapht-core:1.5.2")
    modImplementation(files("vs_jars/valkyrien-ship-schematics-fabric-1.0.jar"))
    // modImplementation(files("vs_jars/cc-tweaked-1.20.1-fabric-1.113.0.jar"))
    modImplementation(files("vs_jars/VMod-Fabric-1.20.1-1.0.0.jar"))

    include (implementation("gg.essential:elementa:676"))
    include (modImplementation("gg.essential:universalcraft-1.20.1-fabric:384"))


}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    archiveBaseName.set("${archiveBaseName.get()}-Fabric-${minecraft_version}")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
